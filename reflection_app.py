import streamlit as st
from fpdf import FPDF
import os

st.set_page_config(page_title="–ö—É—Ä—Å –±–æ–π—ã–Ω—à–∞ –º–µ–Ω—ñ“£ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è–º", layout="centered")
st.markdown("# üåø –ö—É—Ä—Å –±–æ–π—ã–Ω—à–∞ –º–µ–Ω—ñ“£ —Ä–µ—Ñ–ª–µ–∫—Å–∏—è–º")
st.markdown("–û“õ—É –±–∞—Ä—ã—Å—ã–Ω–¥–∞ –∞–ª“ì–∞–Ω ”ô—Å–µ—Ä–ª–µ—Ä—ñ“£—ñ–∑–±–µ–Ω, –∂–µ—Ç—ñ—Å—Ç—ñ–∫—Ç–µ—Ä—ñ“£—ñ–∑–±–µ–Ω –∂”ô–Ω–µ –∫–µ–∑–¥–µ—Å–∫–µ–Ω “õ–∏—ã–Ω–¥—ã“õ—Ç–∞—Ä—ã“£—ã–∑–±–µ–Ω –±”©–ª—ñ—Å—ñ“£—ñ–∑.")

# –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞
learned = st.text_area("üìå –ú–µ–Ω –Ω–µ “Ø–π—Ä–µ–Ω–¥—ñ–º?")
liked = st.text_area("üöÄ –ú–∞“ì–∞–Ω –µ“£ “±–Ω–∞“ì–∞–Ω –Ω”ô—Ä—Å–µ “õ–∞–Ω–¥–∞–π –±–æ–ª–¥—ã?")
difficult = st.text_area("‚öôÔ∏è “ö–∞–Ω–¥–∞–π —Ç–∞“õ—ã—Ä—ã–ø—Ç–∞—Ä “õ–∏—ã–Ω –±–æ–ª–¥—ã?")
skills = st.text_area("üí° –ë–æ–ª–∞—à–∞“õ—Ç–∞ “õ–∞–Ω–¥–∞–π –¥–∞“ì–¥—ã–ª–∞—Ä “õ–∞–∂–µ—Ç –±–æ–ª–∞–¥—ã?")
rating = st.slider("‚úçÔ∏è –ö—É—Ä—Å—Ç—ã –∂–∞–ª–ø—ã –±–∞“ì–∞–ª–∞—É—ã–º (5 –±–∞–ª–¥—ã“õ —à–∫–∞–ª–∞ –±–æ–π—ã–Ω—à–∞):", 1, 5, 4)

st.markdown("---")
name = st.text_input("–ê—Ç—ã-–∂”©–Ω—ñ")
feedback = st.text_area("–ü—ñ–∫—ñ—Ä")

# –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã (DejaVuSans)
font_dir = "fonts"
os.makedirs(font_dir, exist_ok=True)
deja_path = os.path.join(font_dir, "DejaVuSans.ttf")
if not os.path.exists(deja_path):
    import requests
    url = "https://github.com/dejavu-fonts/dejavu-fonts/raw/master/ttf/DejaVuSans.ttf"
    with open(deja_path, "wb") as f:
        f.write(requests.get(url).content)

# –ö–ª–∞—Å—Å PDF —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Unicode
class PDF(FPDF):
    def __init__(self):
        super().__init__()
        self.add_font("DejaVu", "", deja_path, uni=True)
        self.set_font("DejaVu", size=12)

    def header(self):
        self.set_font("DejaVu", size=14)
        self.cell(0, 10, "–ú–æ—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è –ø–æ –∫—É—Ä—Å—É", ln=True, align="C")
        self.ln(10)

    def chapter_title(self, title):
        self.set_font("DejaVu", style="B", size=12)
        self.cell(0, 10, title, ln=True)

    def chapter_body(self, body):
        self.set_font("DejaVu", size=12)
        self.multi_cell(0, 10, body)
        self.ln()

    def add_reflection(self, data):
        for section_title, text in data:
            self.chapter_title(section_title)
            self.chapter_body(text)

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è PDF
if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF"):
    pdf = PDF()
    pdf.add_page()

    reflection_data = [
        ("üìå –ß–µ–º—É —è –Ω–∞—É—á–∏–ª—Å—è/–Ω–∞—É—á–∏–ª–∞—Å—å?", learned),
        ("üöÄ –ß—Ç–æ –º–Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?", liked),
        ("‚öôÔ∏è –ö–∞–∫–∏–µ —Ç–µ–º—ã –±—ã–ª–∏ —Å–ª–æ–∂–Ω—ã–º–∏?", difficult),
        ("üí° –ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è –≤ –±—É–¥—É—â–µ–º?", skills),
        ("‚úçÔ∏è –ú–æ—è –æ–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫—É—Ä—Å–∞", f"{rating} –∏–∑ 5"),
    ]
    if name:
        reflection_data.append(("–ò–º—è", name))
    if feedback:
        reflection_data.append(("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", feedback))

    pdf.add_reflection(reflection_data)
    pdf_output = "reflection.pdf"
    pdf.output(pdf_output)

    with open(pdf_output, "rb") as f:
        st.download_button("üì• –°–∫–∞—á–∞—Ç—å PDF", f, file_name=pdf_output, mime="application/pdf")
